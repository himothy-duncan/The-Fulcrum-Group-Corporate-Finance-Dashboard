# -*- coding: utf-8 -*-
"""Corporate Finance Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11t0Kv-bxhtCcgECZSPoz5CFeKMk3qxJa

# OUTPUT 3: A reproducible Corporate Finance Dashboard.
## Content: Anything from options B-E above will satisfy this.
## Minimal version: A colab file that takes a firm ticker input and a list of competitor tickers at the top, and then combines (yfinance stock data and/or sec-edgar-downloader text and/or headline data) + Gemini insights into a single notebook that formats the outputs nicely.
"""

import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta
import google.generativeai as genai
from google.colab import userdata
from typing import Iterable, Union, Tuple, Dict, Any, List
import math
from tqdm import tqdm
import time
import datetime as dt
import matplotlib.pyplot as plt
import numpy as np

#Firm Ticker
firm = ['CAT']
#Competitors Ticker
competitors=['DE','TEX', 'CMCO', 'CMI','ASTE' ]
# Combine firm and competitor tickers
all_tickers = firm + competitors

#Get today's date and calculate the date one year ago
end_date = datetime.now().strftime('%Y-%m-%d')
start_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')

# Combine firm and competitor tickers
all_tickers = firm + competitors

# Download stock data for all tickers
stock_data = yf.download(all_tickers, start=start_date, end=end_date)

# Display the first few rows of the stock data
display(stock_data.head())

stock_data.columns

# Get news headlines for each ticker
news_data = {}
for ticker in all_tickers:
  try:
    news = yf.Ticker(ticker).news
    news_data[ticker] = news
  except Exception as e:
    print(f"Could not retrieve news for {ticker}: {e}")

# Display the first few headlines for each ticker
for ticker, news in news_data.items():
  print(f"Headlines for {ticker}:")
  if news:
    for i, headline in enumerate(news[:5]): # Displaying up to the first 5 headlines
      print(f"- {headline['content']['title']}")
  else:
    print("No headlines found.")
  print("-" * 20)

def fetch_yahoo_snapshot(
    tickers: Union[str, Iterable[str]],
    save_csv: str = None,
    rate_limit_sleep: float = 0.5,    # seconds to sleep between tickers
    max_retries: int = 3,             # retries per ticker on failure
    backoff_factor: float = 1.5       # exponential backoff multiplier
) -> Tuple[pd.DataFrame, Dict[str, str]]:
    """
    Fetches a broad set of Yahoo Finance variables (aligned with your 97-variable list)
    for one or more tickers, with optional rate limiting and retry/backoff.

    Parameters
    ----------
    tickers : str or iterable of str
        A single ticker (e.g. "AAPL") or a list/iterable (["AAPL","MSFT"]).
    save_csv : str, optional
        If provided, writes the resulting DataFrame to this CSV path.
    rate_limit_sleep : float
        Seconds to sleep between successive tickers.
    max_retries : int
        Number of times to retry a ticker if an exception occurs.
    backoff_factor : float
        Multiplier for exponential backoff between retries (e.g., 0.5, 1.0, 1.5).

    Returns
    -------
    (df, errors) : (pandas.DataFrame, dict)
        df: rows=tickers, columns=your variables
        errors: {ticker: "error message"} for tickers that failed after retries
    """

    if isinstance(tickers, str):
        tickers_list = [tickers]
    else:
        tickers_list = list(dict.fromkeys([t.strip().upper() for t in tickers if t and str(t).strip()]))

    def first_present(dct: Dict[str, Any], *keys: str):
        for k in keys:
            if k in dct and dct[k] is not None:
                return dct[k]
        return None

    def pull_one(ticker: str) -> Dict[str, Any]:
        """Pulls all fields for a single ticker."""
        tk = yf.Ticker(ticker)

        # Prefer get_info (newer yfinance); fallback to .info
        try:
            info = tk.get_info() or {}
        except Exception:
            try:
                info = tk.info or {}
            except Exception:
                info = {}

        # Analyst targets
        try:
            analyst = tk.get_analyst_price_targets() or {}
        except Exception:
            analyst = {}

        # Dividends & splits (for last div/split if info is missing)
        try:
            divs = tk.dividends
        except Exception:
            divs = pd.Series(dtype="float64")

        try:
            splits = tk.splits
        except Exception:
            splits = pd.Series(dtype="float64")

        last_div_value = float(divs.iloc[-1]) if len(divs) else None
        last_div_date = divs.index[-1].date().isoformat() if len(divs) else None

        last_split_factor = None
        last_split_date = None
        if len(splits):
            ratio = splits.iloc[-1]
            if ratio and ratio != 0:
                last_split_factor = f"{int(ratio)}:1" if float(ratio).is_integer() else f"{ratio}:1"
            last_split_date = splits.index[-1].date().isoformat()

        row = {"Ticker": ticker}

        # 1–8 Prices
        row["Previous Close Price"] = first_present(info, "previousClose")
        row["Opening Price"] = first_present(info, "open")
        row["Lowest Price of the Day"] = first_present(info, "dayLow")
        row["Highest Price of the Day"] = first_present(info, "dayHigh")
        row["Previous Close Price (Regular Market)"] = first_present(info, "regularMarketPreviousClose")
        row["Opening Price (Regular Market)"] = first_present(info, "regularMarketOpen")
        row["Lowest Price of the Day (Regular Market)"] = first_present(info, "regularMarketDayLow")
        row["Highest Price of the Day (Regular Market)"] = first_present(info, "regularMarketDayHigh")

        # 9–15 Dividends / valuation
        row["Annual Dividend Rate"] = first_present(info, "trailingAnnualDividendRate")
        row["Dividend Yield"] = first_present(info, "dividendYield", "trailingAnnualDividendYield")
        row["Payout Ratio (Dividend Payout as Percentage of Earnings)"] = first_present(info, "payoutRatio")
        row["Five-Year Average Dividend Yield"] = first_present(info, "fiveYearAvgDividendYield")
        row["Beta (Volatility Measure)"] = first_present(info, "beta", "beta3Year", "beta5Year")
        row["Price-to-Earnings Ratio (Trailing 12 Months)"] = first_present(info, "trailingPE")
        row["Price-to-Earnings Ratio (Forward 12 Months)"] = first_present(info, "forwardPE")

        # 16–20 Volumes
        row["Daily Volume of Shares Traded"] = first_present(info, "volume")
        row["Daily Volume of Shares Traded (Regular Market)"] = first_present(info, "regularMarketVolume")
        row["Average Volume of Shares Traded"] = first_present(info, "averageVolume")
        row["Average Volume of Shares Traded (Last 10 Days)"] = first_present(info, "averageDailyVolume10Day", "averageVolume10days")
        row["Average Daily Volume of Shares Traded (Last 10 Days)"] = row["Average Volume of Shares Traded (Last 10 Days)"]

        # 21–24 Bid/Ask
        row["Bid Price"] = first_present(info, "bid")
        row["Ask Price"] = first_present(info, "ask")
        row["Bid Size (Number of Shares)"] = first_present(info, "bidSize")
        row["Ask Size (Number of Shares)"] = first_present(info, "askSize")

        # 25–34 Market & ratios
        row["Market Capitalization"] = first_present(info, "marketCap")
        row["52-Week Low Price"] = first_present(info, "fiftyTwoWeekLow")
        row["52-Week High Price"] = first_present(info, "fiftyTwoWeekHigh")
        row["Price-to-Sales Ratio (Trailing 12 Months)"] = first_present(info, "priceToSalesTrailing12Months")
        row["50-Day Moving Average Price"] = first_present(info, "fiftyDayAverage")
        row["200-Day Moving Average Price"] = first_present(info, "twoHundredDayAverage")
        row["Annual Dividend Rate (Trailing 12 Months)"] = first_present(info, "trailingAnnualDividendRate")
        row["Dividend Yield (Trailing 12 Months)"] = first_present(info, "trailingAnnualDividendYield")
        row["Trading Currency"] = first_present(info, "currency")
        row["Enterprise Value"] = first_present(info, "enterpriseValue")

        # 35–47 Shares & short interest
        row["Profit Margins"] = first_present(info, "profitMargins")
        row["Float Shares (Shares Available to Public)"] = first_present(info, "floatShares")
        row["Shares Outstanding"] = first_present(info, "sharesOutstanding")
        row["Shares Sold Short"] = first_present(info, "sharesShort")
        row["Shares Sold Short in the Previous Month"] = first_present(info, "sharesShortPriorMonth")
        row["Short Interest Date of Previous Month"] = first_present(info, "sharesShortPreviousMonthDate")
        row["Most Recent Short Interest Date"] = first_present(info, "dateShortInterest")
        row["Short Interest as Percentage of Outstanding Shares"] = first_present(info, "sharesPercentSharesOut")
        row["Insider Holdings Percentage"] = first_present(info, "heldPercentInsiders")
        row["Institutional Holdings Percentage"] = first_present(info, "heldPercentInstitutions")
        row["Short Ratio (Days to Cover Short Positions)"] = first_present(info, "shortRatio")
        row["Short Interest as Percentage of Float"] = first_present(info, "shortPercentOfFloat")
        row["Implied Shares Outstanding"] = first_present(info, "impliedSharesOutstanding")

        # 48–61 Book, PE/PEG, splits, EV multiples
        row["Book Value per Share"] = first_present(info, "bookValue")
        row["Price-to-Book Ratio"] = first_present(info, "priceToBook")
        row["Last Fiscal Year End Date"] = first_present(info, "lastFiscalYearEnd")
        row["Next Fiscal Year End Date"] = first_present(info, "nextFiscalYearEnd")
        row["Most Recent Quarter Date"] = first_present(info, "mostRecentQuarter")
        row["Earnings Growth (Quarterly)"] = first_present(info, "earningsQuarterlyGrowth")
        row["Net Income to Common Stockholders"] = first_present(info, "netIncomeToCommon")
        row["Earnings per Share (Trailing 12 Months)"] = first_present(info, "trailingEps")
        row["Earnings per Share (Forward 12 Months)"] = first_present(info, "forwardEps")
        # row["Price/Earnings to Growth (PEG) Ratio"] = first_present(info, "pegRatio")
        row["Last Stock Split Factor"] = last_split_factor or first_present(info, "lastSplitFactor")
        row["Last Stock Split Date"] = last_split_date or (
            dt.date.fromtimestamp(info["lastDividendDate"]).isoformat()
            if "lastDividendDate" in info and info["lastDividendDate"] else None
        )
        row["Enterprise Value to Revenue Ratio"] = first_present(info, "enterpriseToRevenue")
        row["Enterprise Value to EBITDA Ratio"] = first_present(info, "enterpriseToEbitda")

        # 62–71 Performance & analyst
        row["52-Week Price Change Percentage"] = first_present(info, "52WeekChange", "fiftyTwoWeekChangePercent")
        row["S&P 500 52-Week Price Change Percentage"] = first_present(info, "SandP52WeekChange")
        row["Last Dividend Value"] = last_div_value
        row["Last Dividend Payment Date"] = last_div_date or (
            dt.date.fromtimestamp(info["lastDividendDate"]).isoformat()
            if "lastDividendDate" in info and info["lastDividendDate"] else None
        )
        row["Highest Target Price (Analyst Forecast)"] = first_present(analyst, "high")
        row["Lowest Target Price (Analyst Forecast)"] = first_present(analyst, "low")
        row["Mean Target Price (Analyst Forecast)"] = first_present(analyst, "mean")
        row["Median Target Price (Analyst Forecast)"] = first_present(analyst, "median")
        row["Recommendation Mean (Analyst Consensus)"] = first_present(info, "recommendationMean")
        row["Recommendation Key (Analyst Rating)"] = first_present(info, "recommendationKey")
        row["Number of Analyst Opinions"] = first_present(info, "numberOfAnalystOpinions")

        # 73–91 Financials & margins
        row["Total Cash"] = first_present(info, "totalCash")
        row["Cash per Share"] = first_present(info, "totalCashPerShare")
        row["EBITDA (Earnings Before Interest, Taxes, Depreciation, and Amortization)"] = first_present(info, "ebitda")
        row["Total Debt"] = first_present(info, "totalDebt")
        row["Quick Ratio (Liquidity Measure)"] = first_present(info, "quickRatio")
        row["Current Ratio (Liquidity Measure)"] = first_present(info, "currentRatio")
        row["Total Revenue"] = first_present(info, "totalRevenue")
        row["Debt-to-Equity Ratio"] = first_present(info, "debtToEquity")
        row["Revenue per Share"] = first_present(info, "revenuePerShare")
        row["Return on Assets (ROA)"] = first_present(info, "returnOnAssets")
        row["Return on Equity (ROE)"] = first_present(info, "returnOnEquity")
        row["Free Cash Flow"] = first_present(info, "freeCashflow")
        row["Operating Cash Flow"] = first_present(info, "operatingCashflow")
        row["Earnings Growth Rate"] = first_present(info, "earningsGrowth")
        row["Revenue Growth Rate"] = first_present(info, "revenueGrowth")
        row["Gross Profit Margins"] = first_present(info, "grossMargins")
        row["EBITDA Margins"] = first_present(info, "ebitdaMargins")
        row["Operating Margins"] = first_present(info, "operatingMargins")
        row["Financial Currency"] = first_present(info, "financialCurrency")

        # 92–97 PEG trailing + risk
        row["Price/Earnings to Growth (PEG) Ratio (Trailing)"] = first_present(info, "trailingPegRatio")
        row["Audit Risk Level"] = first_present(info, "auditRisk")
        row["Board Risk Level"] = first_present(info, "boardRisk")
        row["Compensation Risk Level"] = first_present(info, "compensationRisk")
        row["Shareholder Rights Risk Level"] = first_present(info, "shareHolderRightsRisk")
        row["Overall Risk Level"] = first_present(info, "overallRisk")

        # Convert possible epoch -> ISO date
        for k in ["Last Fiscal Year End Date", "Next Fiscal Year End Date", "Most Recent Quarter Date"]:
            v = row.get(k)
            if isinstance(v, (int, float)) and v and not math.isnan(v):
                try:
                    row[k] = dt.date.fromtimestamp(v).isoformat()
                except Exception:
                    pass

        return row

    results: List[Dict[str, Any]] = []
    errors: Dict[str, str] = {}
    for i, t in tqdm(enumerate(tickers_list, 1), total=len(tickers_list)):
        attempt = 0
        sleep_curr = 0  # per-ticker dynamic backoff
        while True:
            try:
                if sleep_curr > 0:
                    time.sleep(sleep_curr)
                row = pull_one(t)
                results.append(row)
                break  # success
            except Exception as e:
                attempt += 1
                if attempt > max_retries:
                    errors[t] = f"{type(e).__name__}: {e}"
                    break
                # exponential backoff: base on rate_limit_sleep & backoff_factor
                sleep_curr = max(rate_limit_sleep, rate_limit_sleep * (backoff_factor ** (attempt - 1)))
        # global pacing between tickers
        if i < len(tickers_list) and rate_limit_sleep > 0:
            time.sleep(rate_limit_sleep)

    df = pd.DataFrame(results).set_index("Ticker") if results else pd.DataFrame()

    if save_csv:
        df.to_csv(save_csv)

    return df, errors

# Fetch Yahoo Finance snapshot data
yahoo_snapshot_df, yahoo_snapshot_errors = fetch_yahoo_snapshot(all_tickers)

# Display the fetched data and any errors
display(yahoo_snapshot_df)
display(yahoo_snapshot_errors)

# Calculate percentage change for each ticker
percentage_change_data = stock_data['Close'].apply(lambda x: (x / x.iloc[0] - 1) * 100)

# Create the plot
plt.figure(figsize=(12, 6))

# Plot percentage change for all tickers, highlighting the firm ticker
for ticker in all_tickers:
  if ticker == firm[0]:
    plt.plot(percentage_change_data[ticker], label=ticker, linewidth=2.5, color='red') # Highlight firm ticker
  else:
    plt.plot(percentage_change_data[ticker], label=ticker, linewidth=1) # Default style for competitors

plt.title('Stock Price Percentage Change Over Time (All Tickers)')
plt.xlabel('Date')
plt.ylabel('Percentage Change (%)')
plt.legend()
plt.grid(True)
plt.show()

# Select relevant accounting performance metrics from yahoo_snapshot_df
accounting_metrics = [
    'Profit Margins',
    'Return on Equity (ROE)',
    'Debt-to-Equity Ratio',
    'Gross Profit Margins',
    'Operating Margins',
    'EBITDA Margins'
]

# Filter the dataframe to include only the selected metrics
accounting_df = yahoo_snapshot_df[accounting_metrics]

# Plotting the bar chart
fig, axes = plt.subplots(nrows=len(accounting_metrics), ncols=1, figsize=(12, 6 * len(accounting_metrics)))
fig.suptitle('Accounting Performance Metrics Comparison', y=1.02, fontsize=16)

# Define a color for the firm ticker
firm_color = 'red'
default_color = 'skyblue'

for i, metric in enumerate(accounting_metrics):
    ax = axes[i]
    bars = ax.bar(accounting_df.index, accounting_df[metric], color=[firm_color if ticker == firm[0] else default_color for ticker in accounting_df.index])
    ax.set_ylabel(metric)
    ax.tick_params(axis='x', rotation=45)
    ax.grid(axis='y', linestyle='--', alpha=0.7)

    # Add value labels on top of bars
    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2.0, yval, f'{yval:.2f}', va='bottom', ha='center') # va: vertical alignment, ha: horizontal alignment

plt.tight_layout()
plt.show()

# Select core stock metrics from yahoo_snapshot_df
core_stock_metrics = [
    'Previous Close Price (Regular Market)',
    'Market Capitalization',
    '52-Week High Price',
    '52-Week Low Price',
    'Price-to-Earnings Ratio (Forward 12 Months)',
    'Price-to-Book Ratio',
    'Debt-to-Equity Ratio',
    'Beta (Volatility Measure)'
]

# Create a DataFrame with the selected core stock metrics
core_stock_df = yahoo_snapshot_df[core_stock_metrics]

# Display the table
print("Core Stock Metrics:")
display(core_stock_df)

#Prompt for Gemini
gemini_prompt = f'''
Today's date is October 29th, 2025 and you will be working on behalf of The Fulcrum Group

You are a board-facing corporate finance consultant with 20+ years of
experience advising Fortune 500 boards on capital structure optimization
and cost of capital decisions within {firm}'s industry.
Your expertise includes determining and defending WACC assumptions for strategic
investment, M&A, and capital budgeting decisions.

Through this, you have a lot of experience creating corporate finance dashboards that
combine stock data and headline data for a company and its competitors. You will take both
the stock and headline data to create a nicely formatted corporate finance dashboard that
looks professional and you can send to the finance team.

Headline data for {firm} and its competitors {competitors}:
{"\n".join(news_data)}

Core stock metrics data:
{"\n".join(core_stock_df)}
'''

#Initialize Gemini model
GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

gemini_model = genai.GenerativeModel('gemini-2.5-flash')

print(gemini_model.generate_content(gemini_prompt).text)

"""This is like option B, but the information presented can be more wide ranging. Perhaps financial highlights (from yfinance a la GPT project's code) compared and presented against competitors?

The code should

Start with your focal company's ticker
Accept a list of competitor/comp tickers
Collect info about each firm. Perhaps a structure like:
firms_data = {'cat':{'financials':df1, 'stock_rets':df2, ...},
              'de': {'financials':df1, 'stock_rets':df2, ...},
               ...}
Format a series of "snapshots" from that into various tables. Maybe a "stock performance" graph, and a "accounting performance" table, a "market share" plot, etc...
One you have that, converting this to a DASHBOARD is not too hard:
Click the File menu, then download, then .py.
Give that file to your fav robot, and ask for it to make a "streamlit" dashboard and help you deploy it in the easiest fashion.
"""